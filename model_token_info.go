/*
usermng

usermng api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package usermngclientgo

import (
	"encoding/json"
	"time"
)

// checks if the TokenInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenInfo{}

// TokenInfo struct for TokenInfo
type TokenInfo struct {
	Username *string `json:"username,omitempty"`
	ExpiredAt *time.Time `json:"expiredAt,omitempty"`
}

// NewTokenInfo instantiates a new TokenInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenInfo() *TokenInfo {
	this := TokenInfo{}
	return &this
}

// NewTokenInfoWithDefaults instantiates a new TokenInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenInfoWithDefaults() *TokenInfo {
	this := TokenInfo{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *TokenInfo) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *TokenInfo) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *TokenInfo) SetUsername(v string) {
	o.Username = &v
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *TokenInfo) GetExpiredAt() time.Time {
	if o == nil || IsNil(o.ExpiredAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredAt) {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *TokenInfo) HasExpiredAt() bool {
	if o != nil && !IsNil(o.ExpiredAt) {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given time.Time and assigns it to the ExpiredAt field.
func (o *TokenInfo) SetExpiredAt(v time.Time) {
	o.ExpiredAt = &v
}

func (o TokenInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.ExpiredAt) {
		toSerialize["expiredAt"] = o.ExpiredAt
	}
	return toSerialize, nil
}

type NullableTokenInfo struct {
	value *TokenInfo
	isSet bool
}

func (v NullableTokenInfo) Get() *TokenInfo {
	return v.value
}

func (v *NullableTokenInfo) Set(val *TokenInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenInfo(val *TokenInfo) *NullableTokenInfo {
	return &NullableTokenInfo{value: val, isSet: true}
}

func (v NullableTokenInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


